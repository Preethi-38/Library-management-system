import java.util.*;

public class Main {
    private static Scanner sc = new Scanner(System.in);
    private static Library lib = new Library();

    public static void main(String[] args) {
        lib.seedData();
        System.out.println("===== Library Management System =====");

        while (true) {
            System.out.println("\nLogin as:");
            System.out.println("1. Student");
            System.out.println("2. Admin");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");

            int role = readInt();
            if (role == 0) {
                System.out.println("Exiting program...");
                break;
            }

            System.out.print("Enter ID: ");
            String id = sc.nextLine().trim();
            System.out.print("Enter Password: ");
            String pass = sc.nextLine().trim();

            if (role == 1) {
                Student student = lib.loginStudent(id, pass);
                if (student != null) {
                    studentMenu(student);
                } else {
                    System.out.println("Invalid Student Credentials.");
                }
            } else if (role == 2) {
                Admin admin = lib.loginAdmin(id, pass);
                if (admin != null) {
                    adminMenu(admin);
                } else {
                    System.out.println("Invalid Admin Credentials.");
                }
            } else {
                System.out.println("Invalid choice. Try again.");
            }
        }
        sc.close();
    }

    private static void studentMenu(Student student) {
        while (true) {
            System.out.println("\nStudent Menu:");
            System.out.println("1. Search Book");
            System.out.println("2. Borrow Book");
            System.out.println("3. View Total Books");
            System.out.println("4. Return Book");
            System.out.println("5. Logout");
            System.out.print("Choose option: ");

            int choice = readInt();
            switch (choice) {
                case 1:
                    System.out.print("Enter book name or author to search: ");
                    String query = sc.nextLine().trim();
                    lib.searchBook(query);
                    break;
                case 2:
                    System.out.print("Enter Book ID to borrow: ");
                    String borrowId = sc.nextLine().trim();
                    lib.borrowBook(borrowId, student.getId());
                    break;
                case 3:
                    lib.viewTotalBooks();
                    break;
                case 4:
                    System.out.print("Enter Book ID to return: ");
                    String returnId = sc.nextLine().trim();
                    lib.returnBook(returnId, student.getId());
                    break;
                case 5:
                    System.out.println("Logging out...");
                    return;
                default:
                    System.out.println("Invalid option, try again.");
            }
        }
    }

    private static void adminMenu(Admin admin) {
        while (true) {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. Add Book");
            System.out.println("2. Update Book");
            System.out.println("3. Delete Book");
            System.out.println("4. View Student Info");
            System.out.println("5. Assign Book to Student");
            System.out.println("6. View Total Books");
            System.out.println("7. Add Student");
            System.out.println("8. Logout");
            System.out.print("Choose option: ");

            int choice = readInt();
            switch (choice) {
                case 1:
                    System.out.print("Enter Book ID: ");
                    String newBookId = sc.nextLine().trim();
                    System.out.print("Enter Book Name: ");
                    String newBookName = sc.nextLine().trim();
                    System.out.print("Enter Author Name: ");
                    String newBookAuthor = sc.nextLine().trim();
                    System.out.print("Enter Quantity: ");
                    int qty = readInt();
                    lib.addBook(new Book(newBookId, newBookName, newBookAuthor, qty));
                    break;
                case 2:
                    System.out.print("Enter Book ID to update: ");
                    String updateId = sc.nextLine().trim();
                    lib.updateBook(updateId, sc);
                    break;
                case 3:
                    System.out.print("Enter Book ID to delete: ");
                    String deleteId = sc.nextLine().trim();
                    lib.deleteBook(deleteId);
                    break;
                case 4:
                    System.out.print("Enter Student ID: ");
                    String studentId = sc.nextLine().trim();
                    lib.viewStudentInfo(studentId);
                    break;
                case 5:
                    System.out.print("Enter Student ID: ");
                    String sid = sc.nextLine().trim();
                    System.out.print("Enter Book ID: ");
                    String bid = sc.nextLine().trim();
                    lib.assignBook(sid, bid);
                    break;
                case 6:
                    lib.viewTotalBooks();
                    break;
                case 7:
                    System.out.print("Enter new Student ID: ");
                    String newStudentId = sc.nextLine().trim();
                    if (lib.studentExists(newStudentId)) {
                        System.out.println("Student ID already exists.");
                    } else {
                        System.out.print("Enter password for new student: ");
                        String newStudentPass = sc.nextLine().trim();
                        lib.addStudent(new Student(newStudentId, newStudentPass));
                        System.out.println("Student added successfully.");
                    }
                    break;
                case 8:
                    System.out.println("Logging out...");
                    return;
                default:
                    System.out.println("Invalid option, try again.");
            }
        }
    }

    private static int readInt() {
        while (true) {
            try {
                String input = sc.nextLine().trim();
                return Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.print("Please enter a valid number: ");
            }
        }
    }
}

abstract class User {
    protected String id;
    protected String password;

    public User(String id, String password) {
        this.id = id;
        this.password = password;
    }

    public String getId() {
        return id;
    }

    public boolean checkPassword(String pwd) {
        return password.equals(pwd);
    }
}

class Student extends User {
    private List<String> borrowedBooks = new ArrayList<>();

    public Student(String id, String password) {
        super(id, password);
    }

    public void borrowBook(String bookId) {
        if (!borrowedBooks.contains(bookId)) {
            borrowedBooks.add(bookId);
        }
    }

    public void returnBook(String bookId) {
        borrowedBooks.remove(bookId);
    }

    public List<String> getBorrowedBooks() {
        return borrowedBooks;
    }

    public boolean hasBorrowLimitReached() {
        return borrowedBooks.size() >= 3;
    }
}

class Admin extends User {
    public Admin(String id, String password) {
        super(id, password);
    }
}

class Book {
    private String id;
    private String name;
    private String author;
    private int quantity;

    public Book(String id, String name, String author, int quantity) {
        this.id = id;
        this.name = name;
        this.author = author;
        this.quantity = quantity;
    }

    public String getId() { return id; }
    public String getName() { return name; }
    public String getAuthor() { return author; }
    public int getQuantity() { return quantity; }

    public boolean isAvailable() {
        return quantity > 0;
    }

    public void borrowCopy() {
        if (quantity > 0) quantity--;
    }

    public void returnCopy() {
        quantity++;
    }

    public void setName(String name) { this.name = name; }
    public void setAuthor(String author) { this.author = author; }

    public String toString() {
        return id + ": " + name + " by " + author + " (Available: " + quantity + ")";
    }
}

class Library {
    private Map<String, Student> students = new HashMap<>();
    private Map<String, Admin> admins = new HashMap<>();
    private Map<String, Book> books = new HashMap<>();

    public void seedData() {
        students.put("s1", new Student("s1", "1234"));
        admins.put("a1", new Admin("a1", "2468"));
        books.put("b1", new Book("b1", "Java Basics", "John Doe", 2));
        books.put("b2", new Book("b2", "Data Structures", "Jane Roe", 1));
    }

    public Student loginStudent(String id, String pass) {
        Student s = students.get(id);
        return (s != null && s.checkPassword(pass)) ? s : null;
    }

    public Admin loginAdmin(String id, String pass) {
        Admin a = admins.get(id);
        return (a != null && a.checkPassword(pass)) ? a : null;
    }

    public void searchBook(String keyword) {
        boolean found = false;
        for (Book b : books.values()) {
            if (b.getName().toLowerCase().contains(keyword.toLowerCase()) ||
                b.getAuthor().toLowerCase().contains(keyword.toLowerCase())) {
                System.out.println(b);
                found = true;
            }
        }
        if (!found) System.out.println("No books found.");
    }

    public void borrowBook(String bookId, String studentId) {
        Student s = students.get(studentId);
        Book b = books.get(bookId);
        if (s == null || b == null) {
            System.out.println("Invalid student or book ID.");
            return;
        }
        if (s.getBorrowedBooks().contains(bookId)) {
            System.out.println("You already borrowed this book.");
            return;
        }
        if (s.hasBorrowLimitReached()) {
            System.out.println("Borrow limit reached. Return a book first.");
            return;
        }
        if (!b.isAvailable()) {
            System.out.println("Book not available currently.");
            return;
        }
        b.borrowCopy();
        s.borrowBook(bookId);
        System.out.println("Book borrowed: " + b);
    }

    public void returnBook(String bookId, String studentId) {
        Student s = students.get(studentId);
        Book b = books.get(bookId);
        if (s == null || b == null) {
            System.out.println("Invalid student or book ID.");
            return;
        }
        if (!s.getBorrowedBooks().contains(bookId)) {
            System.out.println("You have not borrowed this book.");
            return;
        }
        s.returnBook(bookId);
        b.returnCopy();
        System.out.println("Book returned successfully.");
    }

    public void addBook(Book book) {
        if (books.containsKey(book.getId())) {
            System.out.println("Book ID already exists.");
            return;
        }
        books.put(book.getId(), book);
        System.out.println("Book added.");
    }

    public void updateBook(String bookId, Scanner sc) {
        Book b = books.get(bookId);
        if (b == null) {
            System.out.println("Book not found.");
            return;
        }
        System.out.print("New name: ");
        String newName = sc.nextLine().trim();
        System.out.print("New author: ");
        String newAuthor = sc.nextLine().trim();
        b.setName(newName);
        b.setAuthor(newAuthor);
        System.out.println("Book updated.");
    }

    public void deleteBook(String bookId) {
        Book removed = books.remove(bookId);
        if (removed != null) {
            for (Student s : students.values()) {
                s.returnBook(bookId); // Clean up from all student records
            }
            System.out.println("Book deleted.");
        } else {
            System.out.println("Book not found.");
        }
    }

    public void viewStudentInfo(String studentId) {
        Student s = students.get(studentId);
        if (s == null) {
            System.out.println("Student not found.");
            return;
        }
        System.out.println("Student ID: " + s.getId());
        List<String> borrowed = s.getBorrowedBooks();
        if (borrowed.isEmpty()) {
            System.out.println("No books borrowed.");
        } else {
            System.out.println("Borrowed books:");
            for (String bookId : borrowed) {
                Book b = books.get(bookId);
                if (b != null) {
                    System.out.println("- " + b);
                } else {
                    System.out.println("- Book ID " + bookId + " (not found)");
                }
            }
        }
    }

    public void assignBook(String studentId, String bookId) {
        Student s = students.get(studentId);
        Book b = books.get(bookId);
        if (s == null || b == null) {
            System.out.println("Invalid student or book ID.");
            return;
        }
        if (!b.isAvailable()) {
            System.out.println("Book is not available.");
            return;
        }
        if (s.getBorrowedBooks().contains(bookId)) {
            System.out.println("Student already has this book.");
            return;
        }
        if (s.hasBorrowLimitReached()) {
            System.out.println("Student has reached the borrow limit.");
            return;
        }
        s.borrowBook(bookId);
        b.borrowCopy();
        System.out.println("Book assigned to student.");
    }

    public void viewTotalBooks() {
        System.out.println("Total books in library: " + books.size());
        for (Book b : books.values()) {
            System.out.println(b);
        }
    }

    public void addStudent(Student student) {
        students.put(student.getId(), student);
    }

    public boolean studentExists(String studentId) {
        return students.containsKey(studentId);
    }
}



---------------------------------------------------------------------------------

OUTPUT:
===== Library Management System =====

Login as:
1. Student
2. Admin
0. Exit
Enter choice: > 2
Enter ID: > a1
Enter Password: > 2468

Admin Menu:
1. Add Book
2. Update Book
3. Delete Book
4. View Student Info
5. Assign Book to Student
6. View Total Books
7. Add Student
8. Logout
Choose option: > 6

Total books in library: 2
b1: Java Basics by John Doe (Available: 2)
b2: Data Structures by Jane Roe (Available: 1)

Choose option: > 7
Enter new Student ID: > s2
Enter password for new student: > 1111
Student added successfully.

Choose option: > 8
Logging out...

Login as:
1. Student
2. Admin
0. Exit
Enter choice: > 1
Enter ID: > s1
Enter Password: > 1234

Student Menu:
1. Search Book
2. Borrow Book
3. View Total Books
4. Return Book
5. Logout
Choose option: > 1
Enter book name or author to search: > java
b1: Java Basics by John Doe (Available: 2)

Choose option: > 2
Enter Book ID to borrow: > b1
Book borrowed: b1: Java Basics by John Doe (Available: 1)

Choose option: > 3
Total books in library: 2
b1: Java Basics by John Doe (Available: 1)
b2: Data Structures by Jane Roe (Available: 1)

Choose option: > 4
Enter Book ID to return: > b1
Book returned successfully.

Choose option: > 5
Logging out...

Login as:
1. Student
2. Admin
0. Exit
Enter choice: > 0
Exiting program...

