import javax.swing.*;
import java.awt.*;
import java.util.*;
// Abstract User
abstract class User {
    protected String id;
    protected String password;

    public User(String id, String password) {
        this.id = id;
        this.password = password;
    }

    public String getId() {
        return id;
    }

    public boolean checkPassword(String pwd) {
        return password.equals(pwd);
    }
}

// =============================
// Student Class
// =============================
class Student extends User {
    private List<String> borrowedBooks = new ArrayList<>();
    public static final int MAX_BORROW = 3;

    public Student(String id, String password) {
        super(id, password);
    }

    public void borrowBook(String bookId) {
        if (!borrowedBooks.contains(bookId)) {
            borrowedBooks.add(bookId);
        }
    }

    public void returnBook(String bookId) {
        borrowedBooks.remove(bookId);
    }

    public List<String> getBorrowedBooks() {
        return borrowedBooks;
    }

    public boolean hasBorrowLimitReached() {
        return borrowedBooks.size() >= MAX_BORROW;
    }
}

// =============================
// Admin Class
// =============================
class Admin extends User {
    public Admin(String id, String password) {
        super(id, password);
    }
}

// =============================
// Book Class
// =============================
class Book {
    private String id;
    private String name;
    private String author;
    private int quantity;

    public Book(String id, String name, String author, int quantity) {
        this.id = id;
        this.name = name;
        this.author = author;
        this.quantity = quantity;
    }

    public String getId() { return id; }
    public String getName() { return name; }
    public String getAuthor() { return author; }
    public int getQuantity() { return quantity; }

    public boolean isAvailable() {
        return quantity > 0;
    }

    public void borrowCopy() {
        if (quantity > 0) quantity--;
    }

    public void returnCopy() {
        quantity++;
    }

    public void setName(String name) { this.name = name; }
    public void setAuthor(String author) { this.author = author; }

    public String toString() {
        return id + ": " + name + " by " + author + " (Available: " + quantity + ")";
    }
}

// =============================
// Library Class
// =============================
class Library {
    private Map<String, Student> students = new HashMap<>();
    private Map<String, Admin> admins = new HashMap<>();
    private Map<String, Book> books = new HashMap<>();

    public void seedData() {
        students.put("s1", new Student("s1", "1234"));
        admins.put("a1", new Admin("a1", "2468"));
        books.put("b1", new Book("b1", "Java Basics", "John Doe", 2));
        books.put("b2", new Book("b2", "Data Structures", "Jane Roe", 1));
    }

    public Student loginStudent(String id, String pass) {
        Student s = students.get(id);
        return (s != null && s.checkPassword(pass)) ? s : null;
    }

    public Admin loginAdmin(String id, String pass) {
        Admin a = admins.get(id);
        return (a != null && a.checkPassword(pass)) ? a : null;
    }

    public String searchBook(String keyword) {
        StringBuilder sb = new StringBuilder();
        for (Book b : books.values()) {
            if (b.getName().toLowerCase().contains(keyword.toLowerCase()) ||
                b.getAuthor().toLowerCase().contains(keyword.toLowerCase())) {
                sb.append(b).append("\n");
            }
        }
        return sb.length() == 0 ? "No books found." : sb.toString();
    }

    public String borrowBook(String bookId, String studentId) {
        Student s = students.get(studentId);
        Book b = books.get(bookId);
        if (s == null || b == null) return "Invalid student or book ID.";
        if (s.getBorrowedBooks().contains(bookId)) return "You already borrowed this book.";
        if (s.hasBorrowLimitReached()) return "Borrow limit reached.";
        if (!b.isAvailable()) return "Book not available currently.";

        b.borrowCopy();
        s.borrowBook(bookId);
        return "Book borrowed: " + b;
    }

    public String returnBook(String bookId, String studentId) {
        Student s = students.get(studentId);
        Book b = books.get(bookId);
        if (s == null || b == null) return "Invalid student or book ID.";
        if (!s.getBorrowedBooks().contains(bookId)) return "You have not borrowed this book.";

        s.returnBook(bookId);
        b.returnCopy();
        return "Book returned successfully.";
    }

    public String addBook(Book book) {
        if (books.containsKey(book.getId())) {
            return "Book ID already exists.";
        }
        books.put(book.getId(), book);
        return "Book added.";
    }

    public String deleteBook(String bookId) {
        Book removed = books.remove(bookId);
        if (removed != null) {
            for (Student s : students.values()) {
                s.returnBook(bookId);
            }
            return "Book deleted.";
        } else {
            return "Book not found.";
        }
    }

    public String viewTotalBooks() {
        StringBuilder sb = new StringBuilder();
        sb.append("Total books in library: ").append(books.size()).append("\n");
        for (Book b : books.values()) {
            sb.append(b).append("\n");
        }
        return sb.toString();
    }

    public void addStudent(Student student) {
        students.put(student.getId(), student);
    }
}

// =============================
// GUI Class
// =============================
public class LibraryGUI {
    private Library library = new Library();
    private JFrame frame;
    private JTextField idField, passField;
    private JComboBox<String> roleBox;

    public LibraryGUI() {
        library.seedData();
        showLoginScreen();
    }

    private void showLoginScreen() {
        frame = new JFrame("Library Management System - Login");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 250);
        frame.setLayout(new GridLayout(5, 2, 10, 10));

        roleBox = new JComboBox<>(new String[]{"Student", "Admin"});
        idField = new JTextField();
        passField = new JPasswordField();

        JButton loginBtn = new JButton("Login");

        frame.add(new JLabel("Role:"));
        frame.add(roleBox);
        frame.add(new JLabel("ID:"));
        frame.add(idField);
        frame.add(new JLabel("Password:"));
        frame.add(passField);
        frame.add(new JLabel(""));
        frame.add(loginBtn);

        loginBtn.addActionListener(e -> handleLogin());

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void handleLogin() {
        String role = (String) roleBox.getSelectedItem();
        String id = idField.getText().trim();
        String pass = passField.getText().trim();

        if ("Student".equals(role)) {
            Student s = library.loginStudent(id, pass);
            if (s != null) {
                frame.dispose();
                showStudentMenu(s);
            } else {
                JOptionPane.showMessageDialog(frame, "Invalid Student credentials!");
            }
        } else {
            Admin a = library.loginAdmin(id, pass);
            if (a != null) {
                frame.dispose();
                showAdminMenu(a);
            } else {
                JOptionPane.showMessageDialog(frame, "Invalid Admin credentials!");
            }
        }
    }

    private void showStudentMenu(Student s) {
        JFrame studentFrame = new JFrame("Student Menu - " + s.getId());
        studentFrame.setSize(400, 300);
        studentFrame.setLayout(new GridLayout(6, 1, 10, 10));

        JButton searchBtn = new JButton("Search Book");
        JButton borrowBtn = new JButton("Borrow Book");
        JButton returnBtn = new JButton("Return Book");
        JButton viewBtn = new JButton("View Total Books");
        JButton logoutBtn = new JButton("Logout");

        studentFrame.add(searchBtn);
        studentFrame.add(borrowBtn);
        studentFrame.add(returnBtn);
        studentFrame.add(viewBtn);
        studentFrame.add(logoutBtn);

        searchBtn.addActionListener(e -> {
            String keyword = JOptionPane.showInputDialog("Enter book name or author:");
            if (keyword != null) {
                JOptionPane.showMessageDialog(studentFrame, library.searchBook(keyword));
            }
        });

        borrowBtn.addActionListener(e -> {
            String bookId = JOptionPane.showInputDialog("Enter Book ID to borrow:");
            if (bookId != null) {
                JOptionPane.showMessageDialog(studentFrame, library.borrowBook(bookId, s.getId()));
            }
        });

        returnBtn.addActionListener(e -> {
            String bookId = JOptionPane.showInputDialog("Enter Book ID to return:");
            if (bookId != null) {
                JOptionPane.showMessageDialog(studentFrame, library.returnBook(bookId, s.getId()));
            }
        });

        viewBtn.addActionListener(e -> 
            JOptionPane.showMessageDialog(studentFrame, library.viewTotalBooks())
        );

        logoutBtn.addActionListener(e -> {
            studentFrame.dispose();
            showLoginScreen();
        });

        studentFrame.setLocationRelativeTo(null);
        studentFrame.setVisible(true);
    }

    private void showAdminMenu(Admin a) {
        JFrame adminFrame = new JFrame("Admin Menu - " + a.getId());
        adminFrame.setSize(400, 350);
        adminFrame.setLayout(new GridLayout(7, 1, 10, 10));

        JButton addBookBtn = new JButton("Add Book");
        JButton deleteBookBtn = new JButton("Delete Book");
        JButton viewBooksBtn = new JButton("View Total Books");
        JButton addStudentBtn = new JButton("Add Student");
        JButton logoutBtn = new JButton("Logout");

        adminFrame.add(addBookBtn);
        adminFrame.add(deleteBookBtn);
        adminFrame.add(viewBooksBtn);
        adminFrame.add(addStudentBtn);
        adminFrame.add(logoutBtn);

        addBookBtn.addActionListener(e -> {
            String id = JOptionPane.showInputDialog("Enter Book ID:");
            String name = JOptionPane.showInputDialog("Enter Book Name:");
            String author = JOptionPane.showInputDialog("Enter Author:");
            int qty = Integer.parseInt(JOptionPane.showInputDialog("Enter Quantity:"));
            JOptionPane.showMessageDialog(adminFrame, library.addBook(new Book(id, name, author, qty)));
        });

        deleteBookBtn.addActionListener(e -> {
            String id = JOptionPane.showInputDialog("Enter Book ID to delete:");
            if (id != null) JOptionPane.showMessageDialog(adminFrame, library.deleteBook(id));
        });

        viewBooksBtn.addActionListener(e -> 
            JOptionPane.showMessageDialog(adminFrame, library.viewTotalBooks())
        );

        addStudentBtn.addActionListener(e -> {
            String id = JOptionPane.showInputDialog("Enter Student ID:");
            String pass = JOptionPane.showInputDialog("Enter Password:");
            library.addStudent(new Student(id, pass));
            JOptionPane.showMessageDialog(adminFrame, "Student added successfully.");
        });

        logoutBtn.addActionListener(e -> {
            adminFrame.dispose();
            showLoginScreen();
        });

        adminFrame.setLocationRelativeTo(null);
        adminFrame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(LibraryGUI::new);
    }
}
